name: Build and Deploy Apps

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [closed]

env:
  APP_NAME: 'Anime Now!'
  BUILD_CONFIG: './MainConfig.xcconfig'
  BUILD_PATH: '/tmp/action-builds'
  INCREMENT_SCRIPT_PATH: './Misc/Scripts/increment_version.sh'
  CREATE_DMG_PATH: './Misc/Scripts/create_dmg.sh'
  BACKGROUND_DMG_PATH: './Misc/Media/dmg_background.png'

  IOS_SCHEME: 'Anime Now! (iOS)'
  IOS_ARCHIVE_PATH: '/tmp/action-builds/Anime Now! (iOS).xcarchive'
  IOS_PAYLOAD_PATH: '/tmp/action-builds/Payload'
  IOS_OUTPUT_PATH: '/tmp/action-builds/Anime Now! (iOS).ipa'

  MACOS_SCHEME: 'Anime Now! (macOS)'
  MACOS_ARCHIVE_PATH: '/tmp/action-builds/Anime Now! (macOS).xcarchive'
  MACOS_OUTPUT_PATH: '/tmp/action-builds/Anime Now! (macOS).dmg'

jobs:
  build-and-deploy:
    runs-on: macos-12
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Determine if beta or release
        run: |
          [[ ${{ github.event.pull_request != null }} == true ]] && [[ ${{ github.event.pull_request.user.login == github.repository.owner.login }} == true ]] && echo "is_release=1" >> $GITHUB_ENV || echo "is_release=0" >> $GITHUB_ENV

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Get build info
        run: |
          echo "latest_commit_build=$(git log --format="%h" -n 1)" >> $GITHUB_ENV
          echo "marketing_version=$(cat ${{ env.BUILD_CONFIG }} | grep 'MARKETING_VERSION' | cut -f 3 -d ' ')" >> $GITHUB_ENV

      - name: Bump upcoming beta marketing version
        id: bump_version
        if: ${{ env.is_release == 0 }}
        run: |
           echo "marketing_version=1.0.0-beta" >> $GITHUB_ENV
#          remember to uncomment this for when after you release 1.0.0 for beta releases
#          sudo chmod +x ${{ env.INCREMENT_SCRIPT_PATH }}
#          echo "marketing_version=$(${{ env.INCREMENT_SCRIPT_PATH }} ${{ env.marketing_version }} feature)-beta" >> $GITHUB_ENV

      - name: Bump Build Version and set build and commit
        run: |
          sed -i '' 's/\(^MARKETING_VERSION = \).*/\1${{ env.marketing_version }}/' MainConfig.xcconfig
          sed -i '' 's/\(^COMMIT = \).*/\1${{ env.latest_commit_build }}/' MainConfig.xcconfig

      - name: Set Release Info
        if: ${{ env.is_release == 1 }}
        run: |
          echo "message_title=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "message_body=${{ github.event.pull_request.body }}" >> $GITHUB_ENV
          echo "tag_version=${{ env.marketing_version }}" >> $GITHUB_ENV

      - name: Set Beta Info
        if: ${{ env.is_release == 0 }}
        run: |
          echo "message_title=v${{ env.marketing_version }}+${{ env.latest_commit_build }} " >> $GITHUB_ENV
          echo "message_body=This is a build of the current state of main repo. There might be some issues and error so I do not guarantee its usability." >> $GITHUB_ENV
          echo "tag_version=${{ env.marketing_version }}+${{ env.latest_commit_build }}" >> $GITHUB_ENV

      - name: Build IOS Archive
        run: xcodebuild archive -destination 'generic/platform=iOS' -scheme '${{ env.IOS_SCHEME }}' -archivePath '${{ env.IOS_ARCHIVE_PATH }}' -xcconfig '${{ env.BUILD_CONFIG }}' CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO CODE_SIGN_IDENTITY= CODE_SIGN_ENTITLEMENTS= GCC_OPTIMIZATION_LEVEL=s SWIFT_OPTIMIZATION_LEVEL=-O

      - name: Build IPA
        run: |
          mkdir -p '${{ env.IOS_PAYLOAD_PATH }}'
          mv '${{ env.IOS_ARCHIVE_PATH }}/Products/Applications/${{ env.APP_NAME }}.app' '${{ env.IOS_PAYLOAD_PATH }}/${{ env.APP_NAME }}.app'
          pushd '${{ env.BUILD_PATH }}'
          zip -r '${{ env.IOS_OUTPUT_PATH }}' './Payload'
          popd

      - name: Build macOS Archive
        run: xcodebuild archive -scheme '${{ env.MACOS_SCHEME }}' -archivePath '${{ env.MACOS_ARCHIVE_PATH }}' -xcconfig '${{ env.BUILD_CONFIG }}' CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO CODE_SIGN_IDENTITY= CODE_SIGN_ENTITLEMENTS= GCC_OPTIMIZATION_LEVEL=s SWIFT_OPTIMIZATION_LEVEL=-O

      - name: Build DMG
        run: |
          create-dmg \
            --volname "${{ env.APP_NAME }}" \
            --background "${{ env.BACKGROUND_DMG_PATH }}" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 160 \
            --icon "${{ env.APP_NAME }}.app" 180 170 \
            --hide-extension "${{ env.APP_NAME }}.app" \
            --app-drop-link 480 170 \
            "${{ env.MACOS_SCHEME }}.dmg" \
            "${{ env.MACOS_ARCHIVE_PATH }}/Products/Applications/"

      - name: Release to GitHub
        uses: softprops/action-gh-release@v1
        with:
         fail_on_unmatched_files: true
         files: |
            ${{ env.IOS_OUTPUT_PATH }}
            ${{ env.MACOS_OUTPUT_PATH }}

         token: ${{ secrets.GITHUB_TOKEN }}
         generate_release_notes: true
         prerelease: ${{ env.is_release == 0 }}
         body: ${{ env.message_body }}
         name: ${{ env.message_title }}
         tag_name: '${{ env.tag_version }}'
