name: Build Release

on:
  workflow_dispatch:
    inputs:
      is_prerelease:
        type: boolean
        default: true
        description: 'Is pre-release'
        required: true
      message_body:
        description: 'Message body'
        default: 'This is a beta build of the current repo. There might be some issues or error with it so I do not guarantee its usability.'
        required: true

jobs:
  setup:
    runs-on: macos-12
    outputs:
      git_sha: ${{ steps.info.outputs.git_sha }}
      semantic_version: ${{ steps.info.outputs.semantic_version }}
      message_tag: ${{ steps.info.outputs.message_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Build Info
        id: info
        run: |
          echo "git_sha=$(git log --format='%h' -n 1)" >> $GITHUB_OUTPUT
          echo "semantic_version=$(cat ./App/MainConfig.xcconfig | grep 'MARKETING_VERSION' | cut -f 3 -d ' ')" >> $GITHUB_OUTPUT
          echo "message_tag=${{ steps.info.outputs.semantic_version }}" >> $GITHUB_OUTPUT

          if [ ${{ github.event.inputs.is_prerelease }} == 'true' ]; then
            # TODO: Get the next latest prerelease build and start it from zero after 1.0.0
            # TODO: Increment to latest version after 1.0.0 release
            echo "semantic_version=${{ steps.info.outputs.semantic_version }}-beta" >> $GITHUB_OUTPUT
            echo "message_tag=${{ steps.info.outputs.semantic_version }}.${{ steps.info.outputs.git_sha }} " >> $GITHUB_OUTPUT
          fi

  build:
    needs: [setup]
    strategy:
      matrix: 
        include:
          - platform: iOS
            extension: ipa
          - platform: macOS
            extension: dmg
    runs-on: macos-12
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Update Commit & Semantic Version
        run: |
          sed -i '' 's/\(^COMMIT = \).*/\1${{ needs.setup.outputs.git_sha }}/' ./App/MainConfig.xcconfig
          sed -i '' 's/\(^MARKETING_VERSION = \).*/\1${{ needs.setup.outputs.semantic_version }}/' ./App/MainConfig.xcconfig

      - name: Archive
        run: |
          pushd App
          xcodebuild archive \
            -destination "generic/platform=${{ matrix.platform }}" \
            -scheme "Anime Now! (${{ matrix.platform }})" \
            -archivePath "./Anime Now! (${{ matrix.platform }}).xcarchive" \
            -xcconfig "./MainConfig.xcconfig" \
            CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO CODE_SIGN_IDENTITY= CODE_SIGN_ENTITLEMENTS= GCC_OPTIMIZATION_LEVEL=s SWIFT_OPTIMIZATION_LEVEL=-O
          popd

      - name: Construct ipa
        if: ${{ matrix.platform == 'iOS' }}
        run: |
          pushd App
          mkdir -p "./Payload"
          mv "./Anime Now! (iOS).xcarchive/Products/Applications/Anime Now!.app" "./Payload/Anime Now!.app"
          zip -r "./Anime Now! (iOS).ipa" './Payload'
          rm -rf "./Payload"
          rm -rf "./Anime Now! (iOS).xcarchive"
          popd

      - name: Construct dmg
        if: ${{ matrix.platform == 'macOS' }}
        run: |
          pushd App
          brew install create-dmg
          create-dmg \
            --volname "Anime Now!" \
            --background "../Misc/Media/dmg_background.png" \
            --window-pos 200 120 \
            --window-size 660 400 \
            --icon-size 160 \
            --icon "Anime Now!.app" 180 170 \
            --hide-extension "Anime Now!.app" \
            --app-drop-link 480 170 \
            --no-internet-enable \
            "./Anime Now! (macOS).dmg" \
            "./Anime Now! (macOS).xcarchive/Products/Applications/"
          popd

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}
          path: './App/Anime Now! (${{ matrix.platform }}).${{ matrix.extension }}'
          if-no-files-found: error

  publish:
    runs-on: macos-12
    needs: [setup, build]
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: Release to GitHub
        id: release
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          files: |
            */*
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true
          prerelease: ${{ github.event.inputs.is_prerelease == 'true' }}
          body: ${{ inputs.message_body }}
          name: v${{ needs.setup.outputs.message_tag }}
          tag_name: ${{ needs.setup.outputs.message_tag }}
